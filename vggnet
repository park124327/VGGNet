import torch
import torchvision
from torchvision import transforms

path = '/content/CIFAR10'
transform = transforms.Compose([
                                transforms.ToTensor()
                                ])

train_set = torchvision.datasets.CIFAR10(path, train=True, transform=transform, download=True)
train_loader = torch.utils.data.DataLoader(train_set,
                                          batch_size=64,
                                          shuffle=True,
                                          num_workers=1)

path = '/content/CIFAR10_test'

test_set = torchvision.datasets.CIFAR10(path, train=False, transform=transform, download=True)
test_loader = torch.utils.data.DataLoader(test_set,
                                          batch_size=1024,
                                          num_workers=1)
classes = ('plane', 'car', 'bird', 'cat', 'deer',
           'dog', 'frog', 'horse', 'ship', 'truck')

torch.cuda.is_available()
import torch.nn as nn
import torch.optim as optim

def conv(in_channels, out_channels):
  return nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1, bias=False)

  
class Block(nn.Sequential):
  def __init__(self, in_channels, out_channels, stack, act=nn.ReLU(True)):
    m = [conv(in_channels, out_channels), nn.BatchNorm2d(out_channels), act]
    for _ in range(stack-1):
      m.append(conv(out_channels, out_channels))
      m.append(nn.BatchNorm2d(out_channels))
      m.append(act)
    m.append(nn.MaxPool2d(2,2))
    
    super(Block, self).__init__(*m)



class Vgg11(nn.Module):
  def __init__(self):
    super().__init__()
    self.conv1 = Block(3, 64, 1)
    self.conv2 = Block(64, 128, 1)
    self.conv3 = Block(128, 256, 2)
    self.conv4 = Block(256, 512, 2)
    self.conv5 = Block(512, 512, 2)
    
    self.fc = nn.Sequential(nn.Linear(512, 512),
                             nn.ReLU(True),
                             nn.Dropout(),
                             nn.Linear(512, 512),
                             nn.ReLU(True),
                             nn.Dropout(),
                             nn.Linear(512, 10))
    self.classifier = nn.Softmax(dim=1)


  def forward(self, x):
    x = self.conv1(x)
    x = self.conv2(x)
    x = self.conv3(x)
    x = self.conv4(x)
    x = self.conv5(x)
    x = torch.flatten(x,1)
    x = self.fc(x)
    x = self.classifier(x)
    return x

model = Vgg11().cuda()
print(model)
import torchsummary

torchsummary.summary(model, (3,32,32))
